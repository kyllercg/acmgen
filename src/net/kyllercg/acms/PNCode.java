/**
 * Copyright (C) 2006, 2008 - Kyller Costa Gorgônio
 * Copyright (C) 2006, 2008 - Universitat Politècnica de Catalunya
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * $Id$
 */

package net.kyllercg.acms;

import java.util.Date;
import java.util.Iterator;
import java.util.Vector;

/**
 * @author Kyller Costa Gorgônio
 * @version 1.2
 */
public class PNCode {
	
	private PetriNet pn;
	private Vector<String> PEPcode = null;
	
	public PNCode(PetriNet pn) {
		
		this.pn = pn;
		this.PEPcode = new Vector<String>();
	}
	
	public Vector<String> getPEPcode() {
		
		return this.PEPcode;
	}
	
	public void genPEPcode() {

		this.PEPcode.clear();
		Date d = new Date(System.currentTimeMillis());

		this.PEPcode.add("PEP\n");
		this.PEPcode.add("PetriBox\n");
		this.PEPcode.add("FORMAT_N\n");
		this.PEPcode.add("% Generated by ACMgen on a\n");
		this.PEPcode.add("% " + System.getProperty("os.name") + " " +
				System.getProperty("os.version") + " at " + d.toString() +
				"\n");
		
		this.PEPcode.add("% --------- Places ---------\n");
		this.PEPcode.add("PL\n");
		genPEPPlaces();
		
		this.PEPcode.add("% --------- Transitions ---------\n");
		this.PEPcode.add("TR\n");
		genPEPTransitions();
		
		this.PEPcode.add("% --------- Transition -> Place Arcs ---------\n");
		this.PEPcode.add("TP\n");
		genPEPArcsTP();
		
		this.PEPcode.add("% --------- Place -> Transition Arcs ---------\n");
		this.PEPcode.add("PT\n");
		genPEPArcsPT();
	}

	public void genPEPPlaces() {
		
		Place e;
		Iterator<Place> i = pn.getPlaces().iterator();
		
		while (i.hasNext()) {
			
			e = (Place)i.next();
			this.PEPcode.add(pn.getPlPosition(e) + "\"" + e.getLabel() +
					"\"" + e.getX() + "@" + e.getY() +
					(e.getMarking() == 1 ? "M1\n" : "\n"));
		}
	}
	
	public void genPEPTransitions() {
		
		Transition e;
		Iterator<Transition> i = pn.getTransitions().iterator();
		
		while (i.hasNext()) {
			
			e = (Transition)i.next();
			this.PEPcode.add(pn.getTrPosition(e) + "\"" + e.getLabel() +
					"\"" + e.getX() + "@" + e.getY() + "\n");
		}
	}
	
	public void genPEPArcsTP() {
		
		Arc e;
		Iterator<Arc> i = pn.getArcs().iterator();
		
		while (i.hasNext()) {
			
			e = (Arc)i.next();
			if (e.getType() == Arc.trans2place ||
					e.getType() == Arc.test) {
				
				this.PEPcode.add(pn.getTrPosition((Transition)e.getSrc()) +
						"<" + pn.getPlPosition((Place)e.getDest()) + "\n");
			}
		}
	}
	
	public void genPEPArcsPT() {
		
		Arc e;
		Iterator<Arc> i = pn.getArcs().iterator();
		
		while (i.hasNext()) {
			
			e = (Arc)i.next();
			if (e.getType() == Arc.place2trans) {
				
				this.PEPcode.add(pn.getPlPosition((Place)e.getSrc()) + ">" +
						pn.getTrPosition((Transition)e.getDest()) + "\n");
			} else if (e.getType() == Arc.test) {
				
				this.PEPcode.add(pn.getPlPosition((Place)e.getDest()) + ">" +
						pn.getTrPosition((Transition)e.getSrc()) + "\n");
			}
		}
	}
}
